From 8d60689d7748fe8c0d4bfbf3af5000c4ecb6b12e Mon Sep 17 00:00:00 2001
From: Ilya Kurdyukov <jpegqs@gmail.com>
Date: Wed, 4 Aug 2021 15:48:43 +0700
Subject: [PATCH] mysql-8.0.26 e2k support

---
 cmake/abi_check.cmake                        | 2 +-
 extra/robin-hood-hashing/robin_hood.h        | 2 +-
 extra/zstd/lib/common/compiler.h             | 2 +-
 sql/containers/atomics_array.h               | 2 +-
 sql/containers/integrals_lockfree_queue.h    | 2 +-
 sql/mem_root_array.h                         | 2 +-
 sql/mysqld.cc                                | 2 +-
 sql/mysqld.h                                 | 2 +-
 sql/thr_malloc.h                             | 2 +-
 storage/innobase/handler/ha_innodb.cc        | 2 +-
 storage/innobase/include/ut0rnd.ic           | 4 ++--
 storage/innobase/ut/ut0rnd.cc                | 2 +-
 unittest/gunit/gunit_test_main.cc            | 2 +-
 unittest/gunit/gunit_test_main.h             | 2 +-
 unittest/gunit/innodb/ut0lock_free_hash-t.cc | 2 +-
 15 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/cmake/abi_check.cmake b/cmake/abi_check.cmake
index 0e1886bb..6a04fc6a 100644
--- a/cmake/abi_check.cmake
+++ b/cmake/abi_check.cmake
@@ -29,7 +29,7 @@
 # only be run  on Unix and only if gcc is used. On some Unixes,
 # (Solaris) sed or diff might act differently from GNU, so we run only 
 # on systems we can trust.
-IF(LINUX)
+IF(LINUX AND NOT CMAKE_SYSTEM_PROCESSOR STREQUAL "e2k")
   SET(RUN_ABI_CHECK 1)
 ELSE()
   SET(RUN_ABI_CHECK 0)
diff --git a/extra/robin-hood-hashing/robin_hood.h b/extra/robin-hood-hashing/robin_hood.h
index c92b96ad..67f25aeb 100644
--- a/extra/robin-hood-hashing/robin_hood.h
+++ b/extra/robin-hood-hashing/robin_hood.h
@@ -175,7 +175,7 @@ static Counts& counts() {
 #ifndef __has_cpp_attribute // For backwards compatibility
 #    define __has_cpp_attribute(x) 0
 #endif
-#if __has_cpp_attribute(clang::fallthrough)
+#if __has_cpp_attribute(clang::fallthrough) && !defined(__e2k__)
 #    define ROBIN_HOOD_PRIVATE_DEFINITION_FALLTHROUGH() [[clang::fallthrough]]
 #elif __has_cpp_attribute(gnu::fallthrough)
 #    define ROBIN_HOOD_PRIVATE_DEFINITION_FALLTHROUGH() [[gnu::fallthrough]]
diff --git a/extra/zstd/lib/common/compiler.h b/extra/zstd/lib/common/compiler.h
index 6686b837..1e831728 100644
--- a/extra/zstd/lib/common/compiler.h
+++ b/extra/zstd/lib/common/compiler.h
@@ -128,7 +128,7 @@
 }
 
 /* vectorization */
-#if !defined(__clang__) && defined(__GNUC__)
+#if !defined(__clang__) && defined(__GNUC__) && !defined(__e2k__)
 #  define DONT_VECTORIZE __attribute__((optimize("no-tree-vectorize")))
 #else
 #  define DONT_VECTORIZE
diff --git a/sql/containers/atomics_array.h b/sql/containers/atomics_array.h
index 2fbb5c24..84f794cb 100644
--- a/sql/containers/atomics_array.h
+++ b/sql/containers/atomics_array.h
@@ -256,7 +256,7 @@ class Atomics_array {
 
   friend std::ostream &operator<<(std::ostream &out,
                                   Atomics_array<T, I, A> &in) {
-    out << in.to_string(true) << std::flush;
+    out << in.to_string() << std::flush;
     return out;
   }
 
diff --git a/sql/containers/integrals_lockfree_queue.h b/sql/containers/integrals_lockfree_queue.h
index 68db8f85..b32fb2ff 100644
--- a/sql/containers/integrals_lockfree_queue.h
+++ b/sql/containers/integrals_lockfree_queue.h
@@ -542,7 +542,7 @@ class Integrals_lockfree_queue {
   friend std::ostream &operator<<(
       std::ostream &out,
       Integrals_lockfree_queue<T, Null, Erased, I, A> const &in) {
-    out << in.to_string(true) << std::flush;
+    out << in.to_string() << std::flush;
     return out;
   }
 
diff --git a/sql/mem_root_array.h b/sql/mem_root_array.h
index 4a0311a6..ba527a7d 100644
--- a/sql/mem_root_array.h
+++ b/sql/mem_root_array.h
@@ -477,7 +477,7 @@ class Mem_root_array : public Mem_root_array_YY<Element_type> {
       : Mem_root_array(root, x.cbegin(), x.cend()) {}
 
   Mem_root_array(std::initializer_list<Element_type> elements)
-      : Mem_root_array(*THR_MALLOC, begin(elements), end(elements)) {}
+      : Mem_root_array(*THR_MALLOC, elements.begin(), elements.end()) {}
 
   ~Mem_root_array() { super::clear(); }
 
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 50b76e2f..efa8df6d 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -1508,7 +1508,7 @@ SHOW_COMP_OPTION have_statement_timeout = SHOW_OPTION_DISABLED;
 
 /* Thread specific variables */
 
-thread_local MEM_ROOT **THR_MALLOC = nullptr;
+__thread MEM_ROOT **THR_MALLOC = nullptr;
 
 mysql_mutex_t LOCK_status, LOCK_uuid_generator, LOCK_crypt,
     LOCK_global_system_variables, LOCK_user_conn, LOCK_error_messages;
diff --git a/sql/mysqld.h b/sql/mysqld.h
index 0d7d41c4..73a53159 100644
--- a/sql/mysqld.h
+++ b/sql/mysqld.h
@@ -396,7 +396,7 @@ extern bool migrate_connect_options;
 
 extern LEX_CSTRING sql_statement_names[(uint)SQLCOM_END + 1];
 
-extern thread_local MEM_ROOT **THR_MALLOC;
+extern __thread MEM_ROOT **THR_MALLOC;
 
 extern PSI_file_key key_file_binlog_cache;
 extern PSI_file_key key_file_binlog_index_cache;
diff --git a/sql/thr_malloc.h b/sql/thr_malloc.h
index bf8a99f9..ad45fc74 100644
--- a/sql/thr_malloc.h
+++ b/sql/thr_malloc.h
@@ -28,7 +28,7 @@
 struct CHARSET_INFO;
 struct MEM_ROOT;
 typedef unsigned int PSI_memory_key;
-extern thread_local MEM_ROOT **THR_MALLOC;
+extern __thread MEM_ROOT **THR_MALLOC;
 
 void init_sql_alloc(PSI_memory_key key, MEM_ROOT *root, size_t block_size,
                     size_t pre_alloc_size);
diff --git a/storage/innobase/handler/ha_innodb.cc b/storage/innobase/handler/ha_innodb.cc
index e0416060..082b83c7 100644
--- a/storage/innobase/handler/ha_innodb.cc
+++ b/storage/innobase/handler/ha_innodb.cc
@@ -287,7 +287,7 @@ static ulong innobase_commit_concurrency = 0;
 /* Boolean @@innodb_buffer_pool_in_core_file. */
 bool srv_buffer_pool_in_core_file = TRUE;
 
-extern thread_local ulint ut_rnd_ulint_counter;
+extern __thread ulint ut_rnd_ulint_counter;
 
 /** Percentage of the buffer pool to reserve for 'old' blocks.
 Connected to buf_LRU_old_ratio. */
diff --git a/storage/innobase/include/ut0rnd.ic b/storage/innobase/include/ut0rnd.ic
index 4b3270a2..ddb83ae1 100644
--- a/storage/innobase/include/ut0rnd.ic
+++ b/storage/innobase/include/ut0rnd.ic
@@ -46,7 +46,7 @@ this program; if not, write to the Free Software Foundation, Inc.,
 #include <my_thread_local.h>
 
 /** Seed value of ut_rnd_gen_ulint() */
-extern thread_local ulint ut_rnd_ulint_counter;
+extern __thread ulint ut_rnd_ulint_counter;
 
 /** The following function generates a series of 'random' ulint integers.
  This function is now based on thread local variables.
@@ -74,7 +74,7 @@ enumerate the value space of ulint integers in a pseudo random
 fashion. Note that the same integer is repeated always after
 2 to power 32 calls to the generator (if ulint is 32-bit).
 @return pseudo random number */
-ulint ut_rnd_gen_ulint() {
+static inline ulint ut_rnd_gen_ulint() {
   ulint rnd = ut_rnd_ulint_counter;
   if (rnd == 0) {
     rnd = 65654363;
diff --git a/storage/innobase/ut/ut0rnd.cc b/storage/innobase/ut/ut0rnd.cc
index fe3e0ec7..171139a1 100644
--- a/storage/innobase/ut/ut0rnd.cc
+++ b/storage/innobase/ut/ut0rnd.cc
@@ -39,7 +39,7 @@ this program; if not, write to the Free Software Foundation, Inc.,
 #define UT_RANDOM_3 1.0132677
 /*@}*/
 
-thread_local ulint ut_rnd_ulint_counter = 0;
+__thread ulint ut_rnd_ulint_counter = 0;
 
 /** Looks for a prime number slightly greater than the given argument.
  The prime is chosen so that it is not near any power of 2.
diff --git a/unittest/gunit/gunit_test_main.cc b/unittest/gunit/gunit_test_main.cc
index 6a18b82d..30d72983 100644
--- a/unittest/gunit/gunit_test_main.cc
+++ b/unittest/gunit/gunit_test_main.cc
@@ -121,7 +121,7 @@ static void init_signal_handling() {
 // Some globals needed for "small" tests.
 mysql_mutex_t LOCK_open;
 uint opt_debug_sync_timeout = 0;
-thread_local MEM_ROOT **THR_MALLOC = nullptr;
+__thread MEM_ROOT **THR_MALLOC = nullptr;
 thread_local THD *current_thd = nullptr;
 size_t malloc_chunk_size = 1024;
 
diff --git a/unittest/gunit/gunit_test_main.h b/unittest/gunit/gunit_test_main.h
index c59b07a6..99822b7b 100644
--- a/unittest/gunit/gunit_test_main.h
+++ b/unittest/gunit/gunit_test_main.h
@@ -30,7 +30,7 @@ struct MEM_ROOT;
 
 extern mysql_mutex_t LOCK_open;
 extern uint opt_debug_sync_timeout;
-extern thread_local MEM_ROOT **THR_MALLOC;
+extern __thread MEM_ROOT **THR_MALLOC;
 extern thread_local THD *current_thd;
 extern size_t malloc_chunk_size;
 
diff --git a/unittest/gunit/innodb/ut0lock_free_hash-t.cc b/unittest/gunit/innodb/ut0lock_free_hash-t.cc
index 177a5030..8b30f109 100644
--- a/unittest/gunit/innodb/ut0lock_free_hash-t.cc
+++ b/unittest/gunit/innodb/ut0lock_free_hash-t.cc
@@ -84,7 +84,7 @@ unittest/gunit/innodb/CMakeLists.txt */
 #include "storage/innobase/include/ut0mutex.h" /* SysMutex, mutex_enter() */
 
 /* Thread local counter variable for random backoff for spinlocks */
-extern thread_local ulint ut_rnd_ulint_counter;
+extern __thread ulint ut_rnd_ulint_counter;
 
 namespace innodb_lock_free_hash_unittest {
 
-- 
2.17.1

