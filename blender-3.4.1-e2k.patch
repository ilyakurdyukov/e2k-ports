From 46754eb1d0c45d0d86cb24f2e66f23e0840b6284 Mon Sep 17 00:00:00 2001
From: Ilya Kurdyukov <jpegqs@gmail.com>
Date: Thu, 23 Mar 2023 15:50:23 +0700
Subject: [PATCH] blender-3.4.1 e2k support

Using LCC 1.26.16
---
 .../btSequentialImpulseConstraintSolver.cpp               | 4 ++++
 intern/cycles/util/defines.h                              | 2 +-
 intern/cycles/util/math_float3.h                          | 6 +++---
 intern/cycles/util/math_float4.h                          | 2 +-
 intern/cycles/util/optimization.h                         | 8 ++++++++
 intern/cycles/util/simd.h                                 | 4 ++--
 intern/cycles/util/ssef.h                                 | 6 +++---
 intern/cycles/util/system.cpp                             | 6 ++++++
 intern/cycles/util/transform_inverse.h                    | 2 +-
 intern/libmv/libmv/build/build_config.h                   | 8 ++++++++
 .../libmv/libmv/simple_pipeline/camera_intrinsics_impl.h  | 6 ++++--
 source/blender/blenkernel/intern/volume.cc                | 3 +++
 source/blender/blenlib/BLI_enumerable_thread_specific.hh  | 7 +++++++
 source/blender/blenlib/BLI_hash.hh                        | 3 +++
 source/blender/blenlib/BLI_memory_utils.hh                | 1 +
 source/blender/blenlib/BLI_utildefines.h                  | 2 +-
 source/blender/blenlib/BLI_virtual_array.hh               | 3 +++
 .../interface/interface_template_attribute_search.cc      | 4 ++++
 18 files changed, 63 insertions(+), 14 deletions(-)

diff --git a/extern/bullet2/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp b/extern/bullet2/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp
index d2641c5..a0af3a4 100644
--- a/extern/bullet2/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp
+++ b/extern/bullet2/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp
@@ -115,7 +115,11 @@ static inline __m128 btSimdDot3(__m128 vec0, __m128 vec1)
 
 #define USE_FMA 1
 #define USE_FMA3_INSTEAD_FMA4 1
+#ifdef __e2k__
+#define USE_SSE4_DOT 0
+#else
 #define USE_SSE4_DOT 1
+#endif
 
 #define SSE4_DP(a, b) _mm_dp_ps(a, b, 0x7f)
 #define SSE4_DP_FP(a, b) _mm_cvtss_f32(_mm_dp_ps(a, b, 0x7f))
diff --git a/intern/cycles/util/defines.h b/intern/cycles/util/defines.h
index 1969529..da9f2b4 100644
--- a/intern/cycles/util/defines.h
+++ b/intern/cycles/util/defines.h
@@ -12,7 +12,7 @@
 /* Bitness */
 
 #if defined(__ppc64__) || defined(__PPC64__) || defined(__x86_64__) || defined(__ia64__) || \
-    defined(_M_X64) || defined(__aarch64__)
+    defined(_M_X64) || defined(__aarch64__) || defined(__e2k__)
 #  define __KERNEL_64_BIT__
 #endif
 
diff --git a/intern/cycles/util/math_float3.h b/intern/cycles/util/math_float3.h
index eec7122..ef9489a 100644
--- a/intern/cycles/util/math_float3.h
+++ b/intern/cycles/util/math_float3.h
@@ -269,7 +269,7 @@ ccl_device_inline float distance(const float3 &a, const float3 &b)
 
 ccl_device_inline float dot(const float3 &a, const float3 &b)
 {
-#  if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__)
+#  if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__) && !defined(__e2k__)
   return _mm_cvtss_f32(_mm_dp_ps(a, b, 0x7F));
 #  else
   return a.x * b.x + a.y * b.y + a.z * b.z;
@@ -297,7 +297,7 @@ ccl_device_inline float3 cross(const float3 &a, const float3 &b)
 
 ccl_device_inline float3 normalize(const float3 &a)
 {
-#  if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__)
+#  if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__) && !defined(__e2k__)
   __m128 norm = _mm_sqrt_ps(_mm_dp_ps(a.m128, a.m128, 0x7F));
   return float3(_mm_div_ps(a.m128, norm));
 #  else
@@ -413,7 +413,7 @@ ccl_device_inline float reduce_max(float3 a)
 
 ccl_device_inline float len(const float3 a)
 {
-#if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__)
+#if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__) && !defined(__e2k__)
   return _mm_cvtss_f32(_mm_sqrt_ss(_mm_dp_ps(a.m128, a.m128, 0x7F)));
 #else
   return sqrtf(dot(a, a));
diff --git a/intern/cycles/util/math_float4.h b/intern/cycles/util/math_float4.h
index c272187..9af7143 100644
--- a/intern/cycles/util/math_float4.h
+++ b/intern/cycles/util/math_float4.h
@@ -247,7 +247,7 @@ ccl_device_inline float distance(const float4 &a, const float4 &b)
 
 ccl_device_inline float dot(const float4 &a, const float4 &b)
 {
-#  if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__)
+#  if defined(__KERNEL_SSE41__) && defined(__KERNEL_SSE__) && !defined(__e2k__)
 #    if defined(__KERNEL_NEON__)
   __m128 t = vmulq_f32(a, b);
   return vaddvq_f32(t);
diff --git a/intern/cycles/util/optimization.h b/intern/cycles/util/optimization.h
index 19b9651..dc4f906 100644
--- a/intern/cycles/util/optimization.h
+++ b/intern/cycles/util/optimization.h
@@ -57,6 +57,14 @@
 #    define __KERNEL_SSE3__
 #    define __KERNEL_SSE41__
 
+#  elif defined(__e2k__)
+
+#    define __KERNEL_SSE__
+#    define __KERNEL_SSE2__
+#    define __KERNEL_SSE3__
+#    define __KERNEL_SSSE3__
+#    define __KERNEL_SSE41__
+
 #  endif
 
 #endif
diff --git a/intern/cycles/util/simd.h b/intern/cycles/util/simd.h
index 03783ab..92916e7 100644
--- a/intern/cycles/util/simd.h
+++ b/intern/cycles/util/simd.h
@@ -20,7 +20,7 @@
 #  include "util/windows.h"
 #elif defined(_MSC_VER)
 #  include <intrin.h>
-#elif (defined(__x86_64__) || defined(__i386__))
+#elif (defined(__x86_64__) || defined(__i386__) || defined(__e2k__))
 #  include <x86intrin.h>
 #elif defined(__KERNEL_NEON__)
 #  define SSE2NEON_PRECISE_MINMAX 1
@@ -216,7 +216,7 @@ type shuffle_neon(const type &a, const type &b)
 #  endif
 #endif
 
-#if defined(__LZCNT__)
+#if defined(__LZCNT__) && !defined(__e2k__)
 #  define _lzcnt_u32 __lzcnt32
 #  define _lzcnt_u64 __lzcnt64
 #endif
diff --git a/intern/cycles/util/ssef.h b/intern/cycles/util/ssef.h
index 1e2bfa9..bd15fa7 100644
--- a/intern/cycles/util/ssef.h
+++ b/intern/cycles/util/ssef.h
@@ -917,7 +917,7 @@ __forceinline ssef cross(const ssef &a, const ssef &b)
 
 ccl_device_inline const ssef dot3_splat(const ssef &a, const ssef &b)
 {
-#  ifdef __KERNEL_SSE41__
+#  if defined(__KERNEL_SSE41__) && !defined(__e2k__)
   return _mm_dp_ps(a.m128, b.m128, 0x7f);
 #  else
   ssef t = a * b;
@@ -928,7 +928,7 @@ ccl_device_inline const ssef dot3_splat(const ssef &a, const ssef &b)
 /* squared length taking only specified axes into account */
 template<size_t X, size_t Y, size_t Z, size_t W> ccl_device_inline float len_squared(const ssef &a)
 {
-#  ifndef __KERNEL_SSE41__
+#  if !defined(__KERNEL_SSE41__) || defined(__e2k__)
   float4 &t = (float4 &)a;
   return (X ? t.x * t.x : 0.0f) + (Y ? t.y * t.y : 0.0f) + (Z ? t.z * t.z : 0.0f) +
          (W ? t.w * t.w : 0.0f);
@@ -940,7 +940,7 @@ template<size_t X, size_t Y, size_t Z, size_t W> ccl_device_inline float len_squ
 
 ccl_device_inline float dot3(const ssef &a, const ssef &b)
 {
-#  ifdef __KERNEL_SSE41__
+#  if defined(__KERNEL_SSE41__) && !defined(__e2k__)
   return extract<0>(ssef(_mm_dp_ps(a.m128, b.m128, 0x7f)));
 #  else
   ssef t = a * b;
diff --git a/intern/cycles/util/system.cpp b/intern/cycles/util/system.cpp
index 3183ac0..2e97a30 100644
--- a/intern/cycles/util/system.cpp
+++ b/intern/cycles/util/system.cpp
@@ -227,6 +227,12 @@ bool system_cpu_support_avx2()
   CPUCapabilities &caps = system_cpu_capabilities();
   return caps.avx2;
 }
+#elif defined(__e2k__)
+bool system_cpu_support_sse2()  { return true; }
+bool system_cpu_support_sse3()  { return true; }
+bool system_cpu_support_sse41() { return true; }
+bool system_cpu_support_avx()   { return false; }
+bool system_cpu_support_avx2()  { return false; }
 #else
 
 bool system_cpu_support_sse2()
diff --git a/intern/cycles/util/transform_inverse.h b/intern/cycles/util/transform_inverse.h
index bb410a6..5684c87 100644
--- a/intern/cycles/util/transform_inverse.h
+++ b/intern/cycles/util/transform_inverse.h
@@ -24,7 +24,7 @@ ccl_device_forceinline float3 transform_inverse_cross(const float3 a, const floa
 
 ccl_device_forceinline float transform_inverse_dot(const float3 a, const float3 b)
 {
-#ifdef __SSE4_1__
+#if defined(__SSE4_1__) && !defined(__e2k__)
   return _mm_cvtss_f32(_mm_dp_ps((const __m128 &)a, (const __m128 &)b, 0x7F));
 #endif
 
diff --git a/intern/libmv/libmv/build/build_config.h b/intern/libmv/libmv/build/build_config.h
index 1d87660..d00de4d 100644
--- a/intern/libmv/libmv/build/build_config.h
+++ b/intern/libmv/libmv/build/build_config.h
@@ -308,6 +308,11 @@
 #  define ARCH_CPU_PPC64 1
 #  define ARCH_CPU_64_BITS 1
 #  define ARCH_CPU_LITTLE_ENDIAN 1
+#elif defined(__e2k__)
+#  define ARCH_CPU_E2K_FAMILY 1
+#  define ARCH_CPU_E2K 1
+#  define ARCH_CPU_64_BITS 1
+#  define ARCH_CPU_LITTLE_ENDIAN 1
 #elif defined(__ARMEL__)
 #  define ARCH_CPU_ARM_FAMILY 1
 #  define ARCH_CPU_ARMEL 1
@@ -372,6 +377,9 @@
 #if !defined(ARCH_CPU_MIPS_FAMILY)
 #  define ARCH_CPU_MIPS_FAMILY 0
 #endif
+#if !defined(ARCH_CPU_E2K_FAMILY)
+#  define ARCH_CPU_E2K_FAMILY 0
+#endif
 #if !defined(ARCH_CPU_PPC64_FAMILY)
 #  define ARCH_CPU_PPC64_FAMILY 0
 #endif
diff --git a/intern/libmv/libmv/simple_pipeline/camera_intrinsics_impl.h b/intern/libmv/libmv/simple_pipeline/camera_intrinsics_impl.h
index c8c4700..633ee11 100644
--- a/intern/libmv/libmv/simple_pipeline/camera_intrinsics_impl.h
+++ b/intern/libmv/libmv/simple_pipeline/camera_intrinsics_impl.h
@@ -64,8 +64,9 @@ void LookupWarpGrid::Compute(const CameraIntrinsics& intrinsics,
   double aspx = (double)w / intrinsics.image_width();
   double aspy = (double)h / intrinsics.image_height();
 #if defined(_OPENMP)
+  int nthreads __attribute__((unused)) = threads_;
 #  pragma omp parallel for schedule(static)                                    \
-      num_threads(threads_) if (threads_ > 1 && height > 100)
+      num_threads(nthreads) if (nthreads > 1 && height > 100)
 #endif
   for (int y = 0; y < height; y++) {
     for (int x = 0; x < width; x++) {
@@ -133,8 +134,9 @@ void LookupWarpGrid::Apply(const PixelType* input_buffer,
                            int channels,
                            PixelType* output_buffer) {
 #if defined(_OPENMP)
+  int nthreads __attribute__((unused)) = threads_;
 #  pragma omp parallel for schedule(static)                                    \
-      num_threads(threads_) if (threads_ > 1 && height > 100)
+      num_threads(nthreads) if (nthreads > 1 && height > 100)
 #endif
   for (int y = 0; y < height; y++) {
     for (int x = 0; x < width; x++) {
diff --git a/source/blender/blenkernel/intern/volume.cc b/source/blender/blenkernel/intern/volume.cc
index e81657f..8f537d1 100644
--- a/source/blender/blenkernel/intern/volume.cc
+++ b/source/blender/blenkernel/intern/volume.cc
@@ -1526,6 +1526,9 @@ struct CreateGridOp {
     else {
       return GridType::create();
     }
+#ifdef __EDG__
+    return 0;
+#endif
   }
 };
 #endif
diff --git a/source/blender/blenlib/BLI_enumerable_thread_specific.hh b/source/blender/blenlib/BLI_enumerable_thread_specific.hh
index a5bd79d..6efc0d5 100644
--- a/source/blender/blenlib/BLI_enumerable_thread_specific.hh
+++ b/source/blender/blenlib/BLI_enumerable_thread_specific.hh
@@ -32,7 +32,14 @@ namespace blender::threading {
 #ifndef WITH_TBB
 namespace enumerable_thread_specific_utils {
 inline std::atomic<int> next_id = 0;
+#ifdef __EDG__
+extern thread_local int thread_id;
+#ifdef EDG_THREAD_FIX
+thread_local int thread_id = next_id.fetch_add(1, std::memory_order_relaxed);
+#endif
+#else
 inline thread_local int thread_id = next_id.fetch_add(1, std::memory_order_relaxed);
+#endif
 }  // namespace enumerable_thread_specific_utils
 #endif
 
diff --git a/source/blender/blenlib/BLI_hash.hh b/source/blender/blenlib/BLI_hash.hh
index 693d4a8..ba2d148 100644
--- a/source/blender/blenlib/BLI_hash.hh
+++ b/source/blender/blenlib/BLI_hash.hh
@@ -92,6 +92,9 @@ template<typename T> struct DefaultHash {
       /* If this results in a compiler error, no hash function for the type has been found. */
       return value.hash();
     }
+#ifdef __EDG__
+    return 0;
+#endif
   }
 
   template<typename U> uint64_t operator()(const U &value) const
diff --git a/source/blender/blenlib/BLI_memory_utils.hh b/source/blender/blenlib/BLI_memory_utils.hh
index b6ffa6d..2cd1005 100644
--- a/source/blender/blenlib/BLI_memory_utils.hh
+++ b/source/blender/blenlib/BLI_memory_utils.hh
@@ -12,6 +12,7 @@
 #include <memory>
 #include <new>
 #include <type_traits>
+#include <cstddef> // std::byte
 
 #include "BLI_utildefines.h"
 #include "MEM_guardedalloc.h"
diff --git a/source/blender/blenlib/BLI_utildefines.h b/source/blender/blenlib/BLI_utildefines.h
index 9817787..bb2cd4b 100644
--- a/source/blender/blenlib/BLI_utildefines.h
+++ b/source/blender/blenlib/BLI_utildefines.h
@@ -493,7 +493,7 @@ extern "C" {
   ((void)0)
 
 /* assuming a static array */
-#if defined(__GNUC__) && !defined(__cplusplus) && !defined(__clang__) && !defined(__INTEL_COMPILER)
+#if defined(__GNUC__) && !defined(__cplusplus) && !defined(__clang__) && !defined(__INTEL_COMPILER) && !defined(__EDG__)
 #  define ARRAY_SIZE(arr) \
     ((sizeof(struct { int isnt_array : ((const void *)&(arr) == &(arr)[0]); }) * 0) + \
      (sizeof(arr) / sizeof(*(arr))))
diff --git a/source/blender/blenlib/BLI_virtual_array.hh b/source/blender/blenlib/BLI_virtual_array.hh
index 36f5065..35ed7e6 100644
--- a/source/blender/blenlib/BLI_virtual_array.hh
+++ b/source/blender/blenlib/BLI_virtual_array.hh
@@ -571,6 +571,9 @@ template<typename T> struct VArrayAnyExtraInfo {
       BLI_assert_unreachable();
       return {};
     }
+#ifdef __EDG__
+    return {};
+#endif
   }
 };
 
diff --git a/source/blender/editors/interface/interface_template_attribute_search.cc b/source/blender/editors/interface/interface_template_attribute_search.cc
index 55ca945..e2ffe8b 100644
--- a/source/blender/editors/interface/interface_template_attribute_search.cc
+++ b/source/blender/editors/interface/interface_template_attribute_search.cc
@@ -1,5 +1,9 @@
 /* SPDX-License-Identifier: GPL-2.0-or-later */
 
+#ifdef __EDG__
+#define EDG_THREAD_FIX
+#endif
+
 /** \file
  * \ingroup edinterface
  */
-- 
2.34.1

