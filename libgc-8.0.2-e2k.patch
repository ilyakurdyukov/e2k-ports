From 996f65c9e3aa02711056f0c2141853b4b0199095 Mon Sep 17 00:00:00 2001
From: Ilya Kurdyukov <jpegqs@gmail.com>
Date: Fri, 3 Dec 2021 15:03:36 +0700
Subject: [PATCH] libgc-8.0.2 e2k support

Made from the published MCST patch for an older version:
https://storage.mcst.ru/pub/pdk/cur/patches/gc-7.2d/0001-e2k_port.patch
---
 Makefile.am                       |  3 +-
 Makefile.direct                   |  6 +++
 Makefile.in                       |  3 +-
 config.guess                      |  3 ++
 config.sub                        |  2 +
 configure                         |  3 ++
 configure.ac                      |  3 ++
 e2k_save_regs_in_stack.c          | 88 +++++++++++++++++++++++++++++++
 include/gc.h                      |  7 ++-
 include/private/gc_priv.h         | 26 +++++++--
 include/private/gcconfig.h        | 26 +++++++++
 include/private/pthread_support.h |  2 +-
 mach_dep.c                        |  4 +-
 mark.c                            | 28 +++++++++-
 mark_rts.c                        | 17 +++++-
 misc.c                            | 10 ++--
 os_dep.c                          | 22 ++++++++
 pthread_stop_world.c              | 46 +++++++++++++++-
 pthread_support.c                 |  3 ++
 tests/test.c                      |  2 +-
 20 files changed, 282 insertions(+), 22 deletions(-)
 create mode 100644 e2k_save_regs_in_stack.c

diff --git a/Makefile.am b/Makefile.am
index 3ccc949..b9ff17e 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -127,7 +127,8 @@ libgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info $(LIBGC_VER_INFO) \
     -no-undefined
 
 EXTRA_libgc_la_SOURCES = ia64_save_regs_in_stack.s sparc_mach_dep.S \
-    sparc_netbsd_mach_dep.s sparc_sunos4_mach_dep.s
+    sparc_netbsd_mach_dep.s sparc_sunos4_mach_dep.s \
+    e2k_save_regs_in_stack.c
 
 if CPLUSPLUS
 # C++ Interface
diff --git a/Makefile.direct b/Makefile.direct
index 7422cd0..835fb65 100644
--- a/Makefile.direct
+++ b/Makefile.direct
@@ -118,6 +118,7 @@ SRCS= $(CSRCS) \
   include/private/pthread_stop_world.h include/private/darwin_semaphore.h \
   include/private/darwin_stop_world.h include/private/thread_local_alloc.h \
   ia64_save_regs_in_stack.s sparc_mach_dep.S \
+  e2k_save_regs_in_stack.c \
   sparc_netbsd_mach_dep.s sparc_sunos4_mach_dep.s $(CORD_SRCS)
 
 CORD_INCLUDE_FILES= $(srcdir)/include/gc.h $(srcdir)/include/cord.h \
@@ -293,6 +294,7 @@ dyn_test:
 mach_dep.o: $(srcdir)/mach_dep.c $(srcdir)/sparc_mach_dep.S \
   $(srcdir)/sparc_sunos4_mach_dep.s \
   $(srcdir)/ia64_save_regs_in_stack.s \
+  $(srcdir)/e2k_save_regs_in_stack.c \
   $(srcdir)/sparc_netbsd_mach_dep.s $(UTILS)
 	rm -f mach_dep.o
 	./if_mach SPARC SOLARIS $(CC) -c -o mach_dep2.o $(srcdir)/sparc_mach_dep.S
@@ -303,6 +305,9 @@ mach_dep.o: $(srcdir)/mach_dep.c $(srcdir)/sparc_mach_dep.S \
 	./if_mach IA64 "" $(AS) -o ia64_save_regs_in_stack.o $(srcdir)/ia64_save_regs_in_stack.s
 	./if_mach IA64 "" $(CC) -c -o mach_dep1.o $(SPECIALCFLAGS) $(srcdir)/mach_dep.c
 	./if_mach IA64 "" $(LD) -r -o mach_dep.o mach_dep1.o ia64_save_regs_in_stack.o
+	./if_mach E2K "" $(CC) -c -o e2k_save_regs_in_stack.o $(srcdir)/e2k_save_regs_in_stack.c
+	./if_mach E2K "" $(CC) -c -o mach_dep1.o $(SPECIALCFLAGS) $(srcdir)/mach_dep.c
+	./if_mach E2K "" $(LD) -r -o mach_dep.o mach_dep1.o e2k_save_regs_in_stack.o
 	-./if_not_there mach_dep.o || $(CC) -c $(SPECIALCFLAGS) $(srcdir)/mach_dep.c
 	-./if_not_there mach_dep.o || `cygpath -w /bin/sh` $(CC) -c $(SPECIALCFLAGS) $(srcdir)/mach_dep.c
 	-./if_not_there mach_dep.o || /bin/sh $(CC) -c $(SPECIALCFLAGS) $(srcdir)/mach_dep.c
@@ -378,6 +383,7 @@ gctest$(EXEEXT): tests/test.o base_lib $(UTILS)
 	./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o gctest tests/test.o gc.a -lucb
 	./if_mach HP_PA HPUX $(CC) $(CFLAGS) -o gctest tests/test.o gc.a -ldld `./threadlibs`
 	./if_mach M68K AMIGA $(CC) $(CFLAGS) -UGC_AMIGA_MAKINGLIB -o gctest  tests/test.o gc.a `./threadlibs`
+	./if_mach E2K LINUX $(CC) $(CFLAGS) -o gctest tests/test.o gc.a -lm `./threadlibs`
 	./if_not_there gctest$(EXEEXT) || $(CC) $(CFLAGS) -o gctest$(EXEEXT) tests/test.o gc.a `./threadlibs`
 
 # If an optimized setjmp_test generates a segmentation fault,
diff --git a/Makefile.in b/Makefile.in
index f16c1dc..c177e69 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -1071,7 +1071,8 @@ libgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info $(LIBGC_VER_INFO) \
     -no-undefined
 
 EXTRA_libgc_la_SOURCES = ia64_save_regs_in_stack.s sparc_mach_dep.S \
-    sparc_netbsd_mach_dep.s sparc_sunos4_mach_dep.s
+    sparc_netbsd_mach_dep.s sparc_sunos4_mach_dep.s \
+    e2k_save_regs_in_stack.c
 
 @CPLUSPLUS_TRUE@libgccpp_la_SOURCES = gc_cpp.cc
 @CPLUSPLUS_TRUE@libgccpp_la_LIBADD = ./libgc.la
diff --git a/config.guess b/config.guess
index 6c32c86..feec8ed 100755
--- a/config.guess
+++ b/config.guess
@@ -891,6 +891,9 @@ EOF
 	UNAME_MACHINE=aarch64_be
 	echo ${UNAME_MACHINE}-unknown-linux-${LIBC}
 	exit ;;
+    e2k:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-${LIBC}
+	exit ;;
     alpha:Linux:*:*)
 	case `sed -n '/^cpu model/s/^.*: \(.*\)/\1/p' < /proc/cpuinfo` in
 	  EV5)   UNAME_MACHINE=alphaev5 ;;
diff --git a/config.sub b/config.sub
index 7ffe373..182e1ff 100755
--- a/config.sub
+++ b/config.sub
@@ -249,6 +249,7 @@ case $basic_machine in
 	1750a | 580 \
 	| a29k \
 	| aarch64 | aarch64_be \
+	| e2k \
 	| alpha | alphaev[4-8] | alphaev56 | alphaev6[78] | alphapca5[67] \
 	| alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] | alpha64pca5[67] \
 	| am33_2.0 \
@@ -371,6 +372,7 @@ case $basic_machine in
 	580-* \
 	| a29k-* \
 	| aarch64-* | aarch64_be-* \
+	| e2k-* \
 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* | arceb-* \
diff --git a/configure b/configure
index 33b25b2..d0b04a5 100755
--- a/configure
+++ b/configure
@@ -17057,6 +17057,9 @@ $as_echo "#define SUNOS53_SHARED_LIB 1" >>confdefs.h
  ia64-*-*)
     machdep="ia64_save_regs_in_stack.lo"
     ;;
+ e2k-*-*)
+    machdep="e2k_save_regs_in_stack.lo"
+    ;;
  *-*-nacl*)
     $as_echo "#define NO_EXECUTE_PERMISSION 1" >>confdefs.h
 
diff --git a/configure.ac b/configure.ac
index 12d25fe..3a85fae 100644
--- a/configure.ac
+++ b/configure.ac
@@ -589,6 +589,9 @@ case "$host" in
  ia64-*-*)
     machdep="ia64_save_regs_in_stack.lo"
     ;;
+ e2k-*-*)
+    machdep="e2k_save_regs_in_stack.lo"
+    ;;
  *-*-nacl*)
     AC_DEFINE(NO_EXECUTE_PERMISSION)
     ;;
diff --git a/e2k_save_regs_in_stack.c b/e2k_save_regs_in_stack.c
new file mode 100644
index 0000000..e32e5fb
--- /dev/null
+++ b/e2k_save_regs_in_stack.c
@@ -0,0 +1,88 @@
+#include <errno.h>
+#include <error.h>
+#include <stdint.h>
+#include <sys/syscall.h>
+#include <asm/e2k_syswork.h>
+#include "private/gc_priv.h"
+
+#define VA_SIZE 48
+#define VA_MSB  (VA_SIZE - 1)
+#define E2K_PSHTP_SIZE 12
+
+typedef struct e2k_rwap_lo_fields {
+    uint64_t base  : VA_SIZE;  /* [VA_MSB:0] */
+    uint64_t other : 16;       /* [64:VA_SIZE] */
+} e2k_rwap_lo_fields_t;
+
+typedef union e2k_rwap_lo_struct {
+    e2k_rwap_lo_fields_t fields;
+    uint64_t word;
+} e2k_rwap_lo_struct_t;
+
+typedef struct e2k_rwap_hi_fields {
+    uint64_t curptr : 32;      /* [31:0] */
+    uint64_t size   : 32;      /* [63:32] */
+} e2k_rwap_hi_fields_t;
+
+typedef union e2k_rwap_hi_struct {
+    e2k_rwap_hi_fields_t fields;
+    uint64_t word;
+} e2k_rwap_hi_struct_t;
+
+#define get_stack_index(ps)                     \
+{                                               \
+    e2k_rwap_lo_struct_t psp_lo;                \
+    e2k_rwap_hi_struct_t psp_hi;                \
+    uint64_t pshtp;                             \
+    char tmp = 0, val = 0;                      \
+    asm volatile (                              \
+        "1:\n\t"                                \
+        "ldb [ %[tmp] + 0x0 ] 0x7, %[val]\n\t"  \
+        "rrd %%pshtp, %[pshtp]\n\t"             \
+        "rrd %%psp.lo, %[psp_lo]\n\t"           \
+        "rrd %%psp.hi, %[psp_hi]\n"             \
+        "{\n\t"                                 \
+        "stb [ %[tmp] + 0x0 ] 0x2, %[val]\n\t"  \
+        "ibranch 1b ? %%MLOCK\n"                \
+        "}\n"                                   \
+        : [val] "=&r" (val),                    \
+          [psp_lo] "=&r" (psp_lo.word),         \
+          [psp_hi] "=&r" (psp_hi.word),         \
+          [pshtp]  "=&r" (pshtp)                \
+        : [tmp] "r" (&tmp));                    \
+    *ps = psp_lo.fields.base +                  \
+           psp_hi.fields.curptr +               \
+           2 * ((uint64_t)(((int64_t)(pshtp) << \
+           (64 - E2K_PSHTP_SIZE)) >>            \
+           (64 - E2K_PSHTP_SIZE)));             \
+}
+
+size_t GC_get_procedure_stack(ptr_t *ps_buf) {
+    uint64_t ps;
+    uint64_t current_size, ps_size;
+    int ret;
+    get_stack_index(&ps);
+    while (-1 == syscall(__NR_access_hw_stacks,
+                         E2K_READ_PROCEDURE_STACK,
+                         &ps, NULL, 0, &ps_size) &&
+                    errno == EAGAIN)
+        get_stack_index(&ps);
+    *ps_buf = realloc(*ps_buf, ps_size);
+    if (!*ps_buf)
+        error(ENOMEM, ENOMEM, "Could not allocate memory for procedure stack.");
+    while (-1 == (ret = syscall(__NR_access_hw_stacks,
+                                E2K_READ_PROCEDURE_STACK, &ps,
+                                *ps_buf, ps_size, &current_size)) &&
+                    errno == EAGAIN)
+        get_stack_index(&ps);
+    if (ret || current_size != ps_size)
+        error(1, 0, "Could not read procedure stack.");
+    return ps_size;
+}
+
+ptr_t GC_save_regs_in_stack(void) {
+    uint64_t ps;
+    asm volatile("\tflushr\n");
+    get_stack_index(&ps);
+    return (ptr_t)ps;
+}
diff --git a/include/gc.h b/include/gc.h
index 83b5b2e..615b062 100644
--- a/include/gc.h
+++ b/include/gc.h
@@ -1324,8 +1324,13 @@ GC_API int GC_CALL GC_invoke_finalizers(void);
 /* The function is sometimes called keep_alive in other         */
 /* settings.                                                    */
 #if defined(__GNUC__) && !defined(__INTEL_COMPILER)
+#if defined(__e2k__)
+# define GC_reachable_here(ptr) \
+                __asm__ __volatile__(" " : : "r"(ptr) : "memory")
+#else
 # define GC_reachable_here(ptr) \
                 __asm__ __volatile__(" " : : "X"(ptr) : "memory")
+#endif
 #else
   GC_API void GC_CALL GC_noop1(GC_word);
 # ifdef LINT2
@@ -1409,7 +1414,7 @@ GC_API void * GC_CALL GC_call_with_alloc_lock(GC_fn_type /* fn */,
 /* platforms this contains just a single address.                       */
 struct GC_stack_base {
   void * mem_base; /* Base of memory stack. */
-# if defined(__ia64) || defined(__ia64__) || defined(_M_IA64)
+# if defined(__ia64) || defined(__ia64__) || defined(_M_IA64) || defined(__e2k__)
     void * reg_base; /* Base of separate register stack. */
 # endif
 };
diff --git a/include/private/gc_priv.h b/include/private/gc_priv.h
index 3854696..8a82c03 100644
--- a/include/private/gc_priv.h
+++ b/include/private/gc_priv.h
@@ -1582,7 +1582,7 @@ struct GC_traced_stack_sect_s {
                         /* NULL if no such "frame" active.              */
 #endif /* !THREADS */
 
-#ifdef IA64
+#if defined(IA64) || defined(E2K)
   /* Similar to GC_push_all_stack_sections() but for IA-64 registers store. */
   GC_INNER void GC_push_all_register_sections(ptr_t bs_lo, ptr_t bs_hi,
                   int eager, struct GC_traced_stack_sect_s *traced_stack_sect);
@@ -1726,10 +1726,26 @@ GC_EXTERN void (*GC_push_typed_structures)(void);
 GC_INNER void GC_with_callee_saves_pushed(void (*fn)(ptr_t, void *),
                                           volatile ptr_t arg);
 
-#if defined(SPARC) || defined(IA64)
+#if defined(SPARC) || defined(IA64) || defined(E2K)
   /* Cause all stacked registers to be saved in memory.  Return a       */
   /* pointer to the top of the corresponding memory stack.              */
   ptr_t GC_save_regs_in_stack(void);
+  #ifdef E2K
+  /* Copy  full procedure stack to buffer. Get tag of target memory.    */
+  size_t GC_get_procedure_stack(ptr_t *);
+    #ifdef __ptr64__
+      #define LOAD_TAGGED_VALUE(ptr, tag) ({              \
+              ptr_t val;                                  \
+              asm volatile ( "\n\t"                       \
+                  "ldd,sm %[adr], 0x0, %[val]\n\t"        \
+                  "gettagd %[val], %[tag]\n"              \
+                  : [val] "=r" (val), [tag] "=r" (tag)    \
+                  : [adr] "r" (ptr));                     \
+              val; })
+    #else
+      #error "Unsupported march for e2k target"
+    #endif
+  #endif
 #endif
                         /* Push register contents onto mark stack.      */
 
@@ -1781,7 +1797,7 @@ GC_INNER void GC_cond_register_dynamic_libraries(void);
 
 /* Machine dependent startup routines */
 ptr_t GC_get_main_stack_base(void);     /* Cold end of stack.           */
-#ifdef IA64
+#if defined(IA64) || defined(E2K)
   GC_INNER ptr_t GC_get_register_stack_base(void);
                                         /* Cold end of register stack.  */
 #endif
@@ -2334,7 +2350,7 @@ GC_EXTERN signed_word GC_bytes_found;
     GC_EXTERN GC_bool GC_dont_query_stack_min;
                                 /* Defined and set in os_dep.c. */
 # endif
-#elif defined(IA64)
+#elif defined(IA64) || defined(E2K)
   GC_EXTERN ptr_t GC_save_regs_ret_val; /* defined in mach_dep.c. */
                         /* Previously set to backing store pointer.     */
 #endif /* !THREADS */
@@ -2635,7 +2651,7 @@ GC_INNER void *GC_store_debug_info_inner(void *p, word sz, const char *str,
 /* data segment.                                                */
 #if defined(HEURISTIC2) || defined(SEARCH_FOR_DATA_START) \
     || (!defined(STACKBOTTOM) && defined(HEURISTIC2)) \
-    || ((defined(SVR4) || defined(AIX) || defined(DGUX) \
+    || ((defined(SVR4) || defined(AIX) || defined(DGUX) || defined(E2K) \
          || (defined(LINUX) && defined(SPARC))) && !defined(PCR))
 # define NEED_FIND_LIMIT
 #endif
diff --git a/include/private/gcconfig.h b/include/private/gcconfig.h
index 464c661..8485af5 100644
--- a/include/private/gcconfig.h
+++ b/include/private/gcconfig.h
@@ -371,6 +371,10 @@ EXTERN_C_BEGIN
 #    define AARCH64
 #    define mach_type_known
 # endif
+# if defined(LINUX) && defined(__e2k__)
+#    define E2K
+#    define mach_type_known
+# endif
 # if defined(LINUX) && (defined(__arm) || defined(__arm__))
 #    define ARM32
 #    define mach_type_known
@@ -734,6 +738,7 @@ EXTERN_C_BEGIN
                     /*                  running LINUX                   */
                     /*             AARCH64    ==> ARM AArch64           */
                     /*                  (LP64 and ILP32 variants)       */
+                    /*             E2K        ==> Elbrus 2000           */
                     /*             ARM32      ==> Intel StrongARM       */
                     /*             IA64       ==> Intel IPF             */
                     /*                            (e.g. Itanium)        */
@@ -881,6 +886,7 @@ EXTERN_C_BEGIN
      && !defined(__INTEL_COMPILER) && !defined(__PATHCC__) \
      && !defined(__FUJITSU) /* for FX10 system */ \
      && !(defined(POWERPC) && defined(DARWIN)) /* for MacOS X 10.3.9 */ \
+     && !defined(__e2k__) \
      && !defined(RTEMS) \
      && !defined(__ARMCC_VERSION) /* does not exist in armcc gnu emu */ \
      && !defined(__clang__) /* since no-op in clang (3.0) */
@@ -2350,6 +2356,26 @@ EXTERN_C_BEGIN
 #   endif
 # endif
 
+# ifdef E2K
+#   define MACH_TYPE "E2K"
+#   define CPP_WORDSZ 64
+#   define ALIGNMENT 8
+#   ifndef HBLKSIZE
+#     define HBLKSIZE 4096
+#   endif
+#   ifdef LINUX
+#     define OS_TYPE "LINUX"
+#     define LINUX_STACKBOTTOM
+#     define DYNAMIC_LOADING
+      extern int __dso_handle[];
+      extern int _end[];
+#     define DATASTART ((ptr_t)__dso_handle)
+#     define DATAEND ((ptr_t)_end)
+      extern ptr_t GC_register_stackbottom;
+#     define BACKING_STORE_BASE GC_register_stackbottom
+#   endif
+# endif
+
 # ifdef ARM32
 #   if defined(NACL)
 #     define MACH_TYPE "NACL"
diff --git a/include/private/pthread_support.h b/include/private/pthread_support.h
index 2dc1541..a37742b 100644
--- a/include/private/pthread_support.h
+++ b/include/private/pthread_support.h
@@ -113,7 +113,7 @@ typedef struct GC_Thread_Rep {
                                 /* valid only if the thread is blocked; */
                                 /* non-NULL value means already set.    */
 #   endif
-#   ifdef IA64
+#   if defined(IA64) || defined(E2K)
         ptr_t backing_store_end;
         ptr_t backing_store_ptr;
 #   endif
diff --git a/mach_dep.c b/mach_dep.c
index 49d81bb..c564d56 100644
--- a/mach_dep.c
+++ b/mach_dep.c
@@ -92,7 +92,7 @@
 
 #endif /* MACOS && __MWERKS__ */
 
-# if defined(SPARC) || defined(IA64)
+# if defined(SPARC) || defined(IA64) || defined(E2K)
     /* Value returned from register flushing routine; either sp (SPARC) */
     /* or ar.bsp (IA64).                                                */
     GC_INNER ptr_t GC_save_regs_ret_val = NULL;
@@ -284,7 +284,7 @@ GC_INNER void GC_with_callee_saves_pushed(void (*fn)(ptr_t, void *),
             ABORT("feenableexcept failed");
 #       endif
 #     endif /* GETCONTEXT_FPU_EXCMASK_BUG */
-#     if defined(SPARC) || defined(IA64)
+#     if defined(SPARC) || defined(IA64) || defined(E2K)
         /* On a register window machine, we need to save register       */
         /* contents on the stack for this to work.  This may already be */
         /* subsumed by the getcontext() call.                           */
diff --git a/mark.c b/mark.c
index 72223bb..62fad2e 100644
--- a/mark.c
+++ b/mark.c
@@ -734,7 +734,13 @@ GC_INNER mse * GC_mark_from(mse *mark_stack_top, mse *mark_stack,
           credit -= WORDS_TO_BYTES(WORDSZ/2); /* guess */
           while (descr != 0) {
             if ((descr & SIGNB) != 0) {
+            #ifdef E2K
+             int tag;
+             current = (word)LOAD_TAGGED_VALUE(current_p, tag);
+             if (tag == 0) {
+            #else
               current = *(word *)current_p;
+            #endif
               FIXUP_POINTER(current);
               if (current >= (word)least_ha && current < (word)greatest_ha) {
                 PREFETCH((ptr_t)current);
@@ -748,6 +754,9 @@ GC_INNER mse * GC_mark_from(mse *mark_stack_top, mse *mark_stack,
                 PUSH_CONTENTS((ptr_t)current, mark_stack_top,
                               mark_stack_limit, current_p);
               }
+            #ifdef E2K
+             }
+            #endif
             }
             descr <<= 1;
             current_p += sizeof(word);
@@ -822,7 +831,7 @@ GC_INNER mse * GC_mark_from(mse *mark_stack_top, mse *mark_stack,
     {
 #     define PREF_DIST 4
 
-#     ifndef SMALL_CONFIG
+#     if !defined(SMALL_CONFIG) && !defined(E2K)
         word deferred;
 
         /* Try to prefetch the next pointer to be examined ASAP.        */
@@ -859,7 +868,13 @@ GC_INNER mse * GC_mark_from(mse *mark_stack_top, mse *mark_stack,
         /* Empirically, unrolling this loop doesn't help a lot. */
         /* Since PUSH_CONTENTS expands to a lot of code,        */
         /* we don't.                                            */
+        #ifdef E2K
+        int tag;
+        current = (word)LOAD_TAGGED_VALUE(current_p, tag);
+        if (tag == 0) {
+        #else
         current = *(word *)current_p;
+        #endif
         FIXUP_POINTER(current);
         PREFETCH(current_p + PREF_DIST*CACHE_LINE_SIZE);
         if (current >= (word)least_ha && current < (word)greatest_ha) {
@@ -876,10 +891,13 @@ GC_INNER mse * GC_mark_from(mse *mark_stack_top, mse *mark_stack,
           PUSH_CONTENTS((ptr_t)current, mark_stack_top,
                         mark_stack_limit, current_p);
         }
+        #ifdef E2K
+        }
+        #endif
         current_p += ALIGNMENT;
       }
 
-#     ifndef SMALL_CONFIG
+#     if !defined(SMALL_CONFIG) && !defined(E2K)
         /* We still need to mark the entry we previously prefetched.    */
         /* We already know that it passes the preliminary pointer       */
         /* validity test.                                               */
@@ -1590,7 +1608,13 @@ GC_API void GC_CALL GC_push_all_eager(void *bottom, void *top)
       lim = t - 1 /* longword */;
       for (p = b; (word)p <= (word)lim;
            p = (word *)(((ptr_t)p) + ALIGNMENT)) {
+        #ifdef E2K
+        int tag;
+        REGISTER word q = (word)LOAD_TAGGED_VALUE(p, tag);
+        if (tag == 0)
+        #else
         REGISTER word q = *p;
+        #endif
 
         GC_PUSH_ONE_STACK(q, p);
       }
diff --git a/mark_rts.c b/mark_rts.c
index 7d166ed..dd0b558 100644
--- a/mark_rts.c
+++ b/mark_rts.c
@@ -642,11 +642,12 @@ STATIC void GC_push_conditional_with_exclusions(ptr_t bottom, ptr_t top,
     }
 }
 
-#ifdef IA64
+#if defined(IA64) || defined(E2K)
   /* Similar to GC_push_all_stack_sections() but for IA-64 registers store. */
   GC_INNER void GC_push_all_register_sections(ptr_t bs_lo, ptr_t bs_hi,
                   int eager, struct GC_traced_stack_sect_s *traced_stack_sect)
   {
+  #ifndef E2K
     while (traced_stack_sect != NULL) {
         ptr_t frame_bs_lo = traced_stack_sect -> backing_store_end;
         GC_ASSERT((word)frame_bs_lo <= (word)bs_hi);
@@ -658,6 +659,7 @@ STATIC void GC_push_conditional_with_exclusions(ptr_t bottom, ptr_t top,
         bs_hi = traced_stack_sect -> saved_backing_store_ptr;
         traced_stack_sect = traced_stack_sect -> prev;
     }
+  #endif
     GC_ASSERT((word)bs_lo <= (word)bs_hi);
     if (eager) {
         GC_push_all_eager(bs_lo, bs_hi);
@@ -833,6 +835,19 @@ STATIC void GC_push_current_stack(ptr_t cold_gc_frame,
                 /* don't have to worry about the boundary.              */
               }
 #       endif
+#       ifdef E2K
+              /* We also need to push procedure stack store.            */
+              /* Procedure stack grows up, so we can't use              */
+              /* GC_push_all_stack_partially_eager.                     */
+              {
+                ptr_t bs_lo = NULL, bs_hi;
+                size_t stack_size = GC_get_procedure_stack(&bs_lo);
+                bs_hi = bs_lo + stack_size;
+                GC_push_all_register_sections(bs_lo, bs_hi, TRUE,
+                                              GC_traced_stack_sect);
+                free(bs_lo);
+              }
+#       endif
 #   endif /* !THREADS */
 }
 
diff --git a/misc.c b/misc.c
index 28ea789..37a38ed 100644
--- a/misc.c
+++ b/misc.c
@@ -83,7 +83,7 @@ GC_INNER GC_bool GC_debugging_started = FALSE;
 
 ptr_t GC_stackbottom = 0;
 
-#ifdef IA64
+#if defined(IA64) || defined(E2K)
   ptr_t GC_register_stackbottom = 0;
 #endif
 
@@ -1226,11 +1226,11 @@ GC_API void GC_CALL GC_init(void)
         || defined(GC_WIN32_THREADS) || defined(GC_SOLARIS_THREADS)
       if (GC_stackbottom == 0) {
         GC_stackbottom = GC_get_main_stack_base();
-#       if (defined(LINUX) || defined(HPUX)) && defined(IA64)
+#       if (defined(LINUX) || defined(HPUX)) && defined(IA64) || defined(E2K)
           GC_register_stackbottom = GC_get_register_stack_base();
 #       endif
       } else {
-#       if (defined(LINUX) || defined(HPUX)) && defined(IA64)
+#       if (defined(LINUX) || defined(HPUX)) && defined(IA64) || defined(E2K)
           if (GC_register_stackbottom == 0) {
             WARN("GC_register_stackbottom should be set with GC_stackbottom\n", 0);
             /* The following may fail, since we may rely on             */
@@ -2203,7 +2203,7 @@ STATIC void GC_do_blocking_inner(ptr_t data, void * context GC_ATTR_UNUSED)
     struct blocking_data * d = (struct blocking_data *) data;
     GC_ASSERT(GC_is_initialized);
     GC_ASSERT(GC_blocked_sp == NULL);
-#   ifdef SPARC
+#   ifdef SPARC || defined(E2K)
         GC_blocked_sp = GC_save_regs_in_stack();
 #   else
         GC_blocked_sp = (ptr_t) &d; /* save approx. sp */
@@ -2214,7 +2214,7 @@ STATIC void GC_do_blocking_inner(ptr_t data, void * context GC_ATTR_UNUSED)
 
     d -> client_data = (d -> fn)(d -> client_data);
 
-#   ifdef SPARC
+#   ifdef SPARC || defined(E2K)
         GC_ASSERT(GC_blocked_sp != NULL);
 #   else
         GC_ASSERT(GC_blocked_sp == (ptr_t)(&d));
diff --git a/os_dep.c b/os_dep.c
index 2f16481..c5bb001 100644
--- a/os_dep.c
+++ b/os_dep.c
@@ -1017,7 +1017,14 @@ GC_INNER size_t GC_page_size = 0;
                     }
                     result -= MIN_PAGE_SIZE; /* no underflow expected */
                 }
+#ifdef E2K
+                {
+                  char tmp;
+                  asm volatile("ldb %1,0,%0":"=r"(tmp):"r"(result): "memory");
+                }
+#else
                 GC_noop1((word)(*result));
+#endif
             }
         }
         GC_reset_fault_handler();
@@ -1100,6 +1107,13 @@ GC_INNER size_t GC_page_size = 0;
       return result;
     }
 # endif /* IA64 */
+# ifdef E2K
+    GC_INNER ptr_t GC_get_register_stack_base(void)
+    {
+      ptr_t result = GC_find_limit(GC_save_regs_in_stack(), FALSE);
+      return result;
+    }
+# endif
 
   STATIC ptr_t GC_linux_main_stack_base(void)
   {
@@ -1373,6 +1387,14 @@ GC_INNER size_t GC_page_size = 0;
         RESTORE_CANCEL(cancel_state);
       }
       UNLOCK();
+#   endif
+#   ifdef E2K
+      LOCK();
+      {
+        ptr_t bsp = GC_save_regs_in_stack();
+        b->reg_base = GC_find_limit(bsp, FALSE);
+      }
+      UNLOCK();
 #   endif
     return GC_SUCCESS;
   }
diff --git a/pthread_stop_world.c b/pthread_stop_world.c
index 4b2c429..6b0bfba 100644
--- a/pthread_stop_world.c
+++ b/pthread_stop_world.c
@@ -229,7 +229,7 @@ STATIC void GC_suspend_handler_inner(ptr_t dummy, void *context);
     ABORT("Bad signal in suspend_handler");
   }
 
-# if defined(IA64) || defined(HP_PA) || defined(M68K)
+# if defined(IA64) || defined(HP_PA) || defined(M68K) || defined(E2K)
     GC_with_callee_saves_pushed(GC_suspend_handler_inner, NULL);
 # else
     /* We believe that in all other cases the full context is already   */
@@ -340,6 +340,14 @@ STATIC void GC_suspend_handler_inner(ptr_t dummy GC_ATTR_UNUSED,
       return;
     }
 # endif
+# ifdef E2K
+      ptr_t stack = NULL;
+      size_t stack_size;
+      GC_save_regs_in_stack();
+      stack_size = GC_get_procedure_stack(&stack);
+      me->backing_store_ptr = stack;
+      me->backing_store_end = stack + stack_size;
+# endif
 
   if (((word)me->stop_info.last_stop_count & ~(word)THREAD_RESTARTED)
         == (word)my_stop_count) {
@@ -387,6 +395,12 @@ STATIC void GC_suspend_handler_inner(ptr_t dummy GC_ATTR_UNUSED,
   } while (ao_load_acquire_async(&GC_world_is_stopped)
            && ao_load_async(&GC_stop_count) == my_stop_count);
 
+# ifdef E2K
+    stack = me->backing_store_ptr;
+    me->backing_store_ptr = NULL;
+    me->backing_store_end = NULL;
+    free(stack);
+# endif
 # ifdef DEBUG_THREADS
     GC_log_printf("Continuing %p\n", (void *)self);
 # endif
@@ -670,6 +684,10 @@ GC_INNER void GC_push_all_stacks(void)
     ptr_t lo, hi;
     /* On IA64, we also need to scan the register backing store. */
     IF_IA64(ptr_t bs_lo; ptr_t bs_hi;)
+#ifdef E2K
+		size_t stack_size;
+    ptr_t bs_lo, bs_hi;
+#endif
     struct GC_traced_stack_sect_s *traced_stack_sect;
     pthread_t self = pthread_self();
     word total_size = 0;
@@ -686,6 +704,13 @@ GC_INNER void GC_push_all_stacks(void)
         traced_stack_sect = p -> traced_stack_sect;
         if (THREAD_EQUAL(p -> id, self)) {
             GC_ASSERT(!p->thread_blocked);
+#           ifdef E2K
+            GC_save_regs_in_stack();
+            bs_lo = NULL;
+            stack_size = GC_get_procedure_stack(&bs_lo);
+            p->backing_store_ptr = bs_lo;
+            p->backing_store_end = bs_hi = bs_lo + stack_size;
+#           endif
 #           ifdef SPARC
                 lo = (ptr_t)GC_save_regs_in_stack();
 #           else
@@ -712,9 +737,17 @@ GC_INNER void GC_push_all_stacks(void)
             hi = GC_stackbottom;
             IF_IA64(bs_lo = BACKING_STORE_BASE;)
         }
+#       ifdef E2K
+        bs_lo = p->backing_store_ptr;
+        bs_hi = p->backing_store_end;
+#       endif
 #       ifdef DEBUG_THREADS
           GC_log_printf("Stack for thread %p = [%p,%p)\n",
                         (void *)p->id, (void *)lo, (void *)hi);
+#         ifdef E2K
+            GC_log_printf("Procedure stack for thread %p = [%p,%p)\n",
+                          (void *)p->id, (void *)bs_lo, (void *)bs_hi);
+#         endif
 #       endif
         if (0 == lo) ABORT("GC_push_all_stacks: sp not set!");
         if (p->altstack != NULL && (word)p->altstack <= (word)lo
@@ -735,7 +768,7 @@ GC_INNER void GC_push_all_stacks(void)
               (ptr_t)(p -> stop_info.reg_storage + NACL_GC_REG_STORAGE_SIZE));
           total_size += NACL_GC_REG_STORAGE_SIZE * sizeof(ptr_t);
 #       endif
-#       ifdef IA64
+#       if defined(IA64) || defined(E2K)
 #         ifdef DEBUG_THREADS
             GC_log_printf("Reg stack for thread %p = [%p,%p)\n",
                           (void *)p->id, (void *)bs_lo, (void *)bs_hi);
@@ -746,6 +779,15 @@ GC_INNER void GC_push_all_stacks(void)
                                         THREAD_EQUAL(p -> id, self),
                                         traced_stack_sect);
           total_size += bs_hi - bs_lo; /* bs_lo <= bs_hi */
+#         ifdef E2K
+          if (THREAD_EQUAL(p->id, self)) {
+            bs_lo = p->backing_store_ptr;
+            p->backing_store_ptr = NULL;
+            p->backing_store_end = NULL;
+            free(bs_lo);
+            bs_lo = bs_hi = NULL;
+          }
+#         endif
 #       endif
       }
     }
diff --git a/pthread_support.c b/pthread_support.c
index 5a55b4c..77ca6a1 100644
--- a/pthread_support.c
+++ b/pthread_support.c
@@ -1363,6 +1363,9 @@ GC_INNER void GC_do_blocking_inner(ptr_t data, void * context GC_ATTR_UNUSED)
 #   if defined(SPARC) || defined(IA64)
         ptr_t stack_ptr = GC_save_regs_in_stack();
 #   endif
+#   ifdef E2K
+        GC_save_regs_in_stack();
+#   endif
 #   if defined(GC_DARWIN_THREADS) && !defined(DARWIN_DONT_PARSE_STACK)
         GC_bool topOfStackUnset = FALSE;
 #   endif
diff --git a/tests/test.c b/tests/test.c
index 764c34a..7658342 100644
--- a/tests/test.c
+++ b/tests/test.c
@@ -1408,7 +1408,7 @@ void run_one_test(void)
         FAIL;
       }
       if (!TEST_FAIL_COUNT(1)) {
-#       if!(defined(POWERPC) || defined(IA64)) || defined(M68K)
+#       if!(defined(POWERPC) || defined(IA64)) || defined(M68K) || defined(E2K)
           /* On POWERPCs function pointers point to a descriptor in the */
           /* data segment, so there should have been no failures.       */
           /* The same applies to IA64.  Something similar seems to      */
-- 
2.17.1

